/*  =============== PROBLEM STATEMENT ============= 

Implement the Burrows-Wheeler Transform (BWT) and its inverse. 
Given an input string s, the program should compute its BWT and then reconstruct the original string using the inverse BWT.

============= SOLUTION ==============
The bwt function takes a string s and returns its Burrows-Wheeler transform bwt. 
1. The input string is appended with a special sentinel character ('$') to mark the end of the string.
2. Generate all possible cyclic permutations of the input string are generated by shifting the characters.
3, The cyclic permutations are sorted lexicographically, and the last character of each sorted permutation is extracted. 


The inverse_bwt function takes the transformed string bwt and returns the original string. 
1. First, count the occurrences of each character.
2. Next, generate a sorted list of characters based on the counts obtained in the previous step.
3. Next, construct the first column of the transformation matrix. This involves replicating each character in the sorted list based on its corresponding count.
4. Finally, perform the reverse transformation by iteratively selecting characters from the BWT string and reconstructing the original string

Sample Input: 
banana

Sample Output: 
BWT of banana$ is annb$aa
Inverse BWT of annb$aa is banana
*/

import java.util.*;

public class burrow_wheeler_transform {
    public static String bwt(String input) {
        input += "$"; // append $ to input string
        int len = input.length();
        String[] rotations = new String[len];
        StringBuilder sb = new StringBuilder();
        
        // generate matrix of cyclic rotations
        for (int i = 0; i < len; i++) {
            rotations[i] = input.substring(i) + input.substring(0, i);
        }
        
        // sort the matrix
        Arrays.sort(rotations);
        
        // append last character of each sorted string to StringBuilder
        for (String rotation : rotations) {
            sb.append(rotation.charAt(len - 1));
        }
        
        return sb.toString();
    }

    public static String inverseBWT(String bwtString) {
        // Count the occurrences of each character
        Map<Character, Integer> counts = new HashMap<>();
        for (char c : bwtString.toCharArray()) {
            counts.put(c, counts.getOrDefault(c, 0) + 1);
        }

        // Generate the sorted list of characters
        char[] sortedChars = new char[counts.size()];
        int i = 0;
        for (char c : counts.keySet()) {
            sortedChars[i++] = c;
        }
        Arrays.sort(sortedChars);

        // Construct the first column of the transformation matrix
        StringBuilder firstColumn = new StringBuilder();
        for (char c : sortedChars) {
            int count = counts.get(c);
            for (int j = 0; j < count; j++) {
                firstColumn.append(c);
            }
        }

        // Perform the reverse transformation
        int index = 0;
        StringBuilder originalString = new StringBuilder();
        for (int k = 0; k < bwtString.length(); k++) {
            char c = bwtString.charAt(index);
            originalString.insert(0, c);
            index = firstColumn.indexOf(Character.toString(c));
            firstColumn.setCharAt(index, '\0');
        }

        return originalString.substring(1);
    }
 
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a string: ");
        String inputString = scanner.nextLine();
        
        // Perform BWT
        String bwtResult = bwt(inputString);
        System.out.println("Burrows-Wheeler Transform: " + bwtResult);
        
        // Perform inverse BWT
        String inverseBwtResult = inverseBWT(bwtResult);
        System.out.println("Inverse BWT: " + inverseBwtResult);
        
        scanner.close();
    }
}
