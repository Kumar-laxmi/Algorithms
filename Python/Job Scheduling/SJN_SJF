def sjf(processes):
    n = len(processes)
    waiting_time = [0] * n
    turnaround_time = [0] * n

    # Sort processes by burst time
    sorted_processes = sorted(processes, key=lambda x: x[1])

    # Calculate waiting time and turnaround time for each process
    for i in range(1, n):
        waiting_time[i] = sorted_processes[i - 1][1] + waiting_time[i - 1]

    for i in range(n):
        turnaround_time[i] = sorted_processes[i][1] + waiting_time[i]

    # Print the results
    print("Process\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"{sorted_processes[i][0]}\t\t{sorted_processes[i][1]}\t\t{waiting_time[i]}\t\t{turnaround_time[i]}")

# Usage example
processes = [("P0", 7), ("P1", 4), ("P2", 1), ("P3", 4)]
sjf(processes)
